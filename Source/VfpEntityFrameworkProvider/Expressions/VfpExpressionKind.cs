using System.Data.Entity.Core.Common.CommandTrees;

namespace VfpEntityFrameworkProvider.Expressions {
    public enum VfpExpressionKind {
        All = DbExpressionKind.All,
        And = DbExpressionKind.And,
        Any = DbExpressionKind.Any,
        Case = DbExpressionKind.Case,
        Cast = DbExpressionKind.Cast,
        Constant = DbExpressionKind.Constant,
        CrossApply = DbExpressionKind.CrossApply,
        CrossJoin = DbExpressionKind.CrossJoin,
        Deref = DbExpressionKind.Deref,
        Distinct = DbExpressionKind.Distinct,
        Divide = DbExpressionKind.Divide,
        Element = DbExpressionKind.Element,
        EntityRef = DbExpressionKind.EntityRef,
        Equals = DbExpressionKind.Equals,
        Except = DbExpressionKind.Except,
        Filter = DbExpressionKind.Filter,
        FullOuterJoin = DbExpressionKind.FullOuterJoin,
        Function = DbExpressionKind.Function,
        GreaterThan = DbExpressionKind.GreaterThan,
        GreaterThanOrEquals = DbExpressionKind.GreaterThanOrEquals,
        GroupBy = DbExpressionKind.GroupBy,
        InnerJoin = DbExpressionKind.InnerJoin,
        Intersect = DbExpressionKind.Intersect,
        IsEmpty = DbExpressionKind.IsEmpty,
        IsNull = DbExpressionKind.IsNull,
        IsOf = DbExpressionKind.IsOf,
        IsOfOnly = DbExpressionKind.IsOfOnly,
        LeftOuterJoin = DbExpressionKind.LeftOuterJoin,
        LessThan = DbExpressionKind.LessThan,
        LessThanOrEquals = DbExpressionKind.LessThanOrEquals,
        Like = DbExpressionKind.Like,
        Limit = DbExpressionKind.Limit,
        Minus = DbExpressionKind.Minus,
        Modulo = DbExpressionKind.Modulo,
        Multiply = DbExpressionKind.Multiply,
        NewInstance = DbExpressionKind.NewInstance,
        Not = DbExpressionKind.Not,
        NotEquals = DbExpressionKind.NotEquals,
        Null = DbExpressionKind.Null,
        OfType = DbExpressionKind.OfType,
        OfTypeOnly = DbExpressionKind.OfTypeOnly,
        Or = DbExpressionKind.Or,
        OuterApply = DbExpressionKind.OuterApply,
        ParameterReference = DbExpressionKind.ParameterReference,
        Plus = DbExpressionKind.Plus,
        Project = DbExpressionKind.Project,
        Property = DbExpressionKind.Property,
        Ref = DbExpressionKind.Ref,
        RefKey = DbExpressionKind.RefKey,
        RelationshipNavigation = DbExpressionKind.RelationshipNavigation,
        Scan = DbExpressionKind.Scan,
        Skip = DbExpressionKind.Skip,
        Sort = DbExpressionKind.Sort,
        Treat = DbExpressionKind.Treat,
        UnaryMinus = DbExpressionKind.UnaryMinus,
        UnionAll = DbExpressionKind.UnionAll,
        VariableReference = DbExpressionKind.VariableReference,
        Lambda = DbExpressionKind.Lambda,
        In = DbExpressionKind.In,

        XmlToCursor = 200,
        XmlToCursorScan,
        XmlToCursorProperty,
        Parameter,
        LikeC,
        CommandTree,
        PropertyVariableName
    }
}